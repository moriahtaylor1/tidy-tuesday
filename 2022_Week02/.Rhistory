#Sun
geom_hline(yintercept=as.numeric(calcSun(Sun)[1]),
size=as.numeric(calcSun(Sun)[2]),
color=as.character(calcSun(Sun)[3])) +
#Moon
geom_point(x=60,
y=31,
size=10,
color="black",
fill="black") +
xlim(0,120) + ylim(0,120)
}
drawArt(Sun="Virgo", Moon="Gemini")
drawArt <- function(Sun, Moon){
ggplot() +
#Sun
geom_hline(yintercept=as.numeric(calcSun(Sun)[1]),
size=as.numeric(calcSun(Sun)[2]),
color=as.character(calcSun(Sun)[3])) +
#Moon
geom_point(x=60,
y=31,
size=100,
color="black",
fill="black") +
xlim(0,120) + ylim(0,120)
}
drawArt(Sun="Virgo", Moon="Gemini")
drawArt <- function(Sun, Moon){
ggplot() +
#Sun
geom_hline(yintercept=as.numeric(calcSun(Sun)[1]),
size=as.numeric(calcSun(Sun)[2]),
color=as.character(calcSun(Sun)[3])) +
#Moon
geom_point(aes(x=60,
y=31),
size=10,
color="black",
fill="black") +
xlim(0,120) + ylim(0,120)
}
drawArt(Sun="Virgo", Moon="Gemini")
calcMoon <- function(Moon){
#get index of Moon Sign
index <- as.numeric(match(Moon, signs))
y <- (index*7) + 10
#pick a outline color based on modality of Moon Sign
color <- ""
if (Moon %in% mutable){color <- "purple"}
else if (Moon %in% fixed){color <- "pink"}
else if (Moon %in% cardinal){color <- "yellow"}
#pick a fill color according to Moon Sign's element
fill <- ""
if (Moon %in% fire){fill <- "red"}
else if (Moon %in% water){fill <- "blue"}
else if (Moon %in% earth){fill <- "green"}
else if (Moon %in% air){fill <- "gray"}
#return statement
return(c(y, fill, color))
}
drawArt <- function(Sun, Moon){
ggplot() +
#Sun
geom_hline(yintercept=as.numeric(calcSun(Sun)[1]),
size=as.numeric(calcSun(Sun)[2]),
color=as.character(calcSun(Sun)[3])) +
#Moon
geom_point(aes(x=60,y=31),
size=10,
color=as.character(calcMoon(Moon)[2]),
fill=as.character(calcMoon(Moon)[3])) +
xlim(0,120) + ylim(0,120)
}
drawArt(Sun="Virgo", Moon="Gemini")
drawArt <- function(Sun, Moon){
ggplot() +
#Sun
geom_hline(yintercept=as.numeric(calcSun(Sun)[1]),
size=as.numeric(calcSun(Sun)[2]),
color=as.character(calcSun(Sun)[3])) +
#Moon
geom_point(aes(x=60,y=31,
color=as.character(calcMoon(Moon)[2]),
fill=as.character(calcMoon(Moon)[3])),
size=10) +
xlim(0,120) + ylim(0,120)
}
drawArt(Sun="Virgo", Moon="Gemini")
calcMoon <- function(Moon){
#get index of Moon Sign
index <- as.numeric(match(Moon, signs))
y <- (index*7) + 10
#pick a outline color based on modality of Moon Sign
color <- ""
if (Moon %in% mutable){color <- "purple"}
else if (Moon %in% fixed){color <- "pink"}
else if (Moon %in% cardinal){color <- "yellow"}
#pick a fill color according to Moon Sign's element
fill <- ""
if (Moon %in% fire){fill <- "red"}
else if (Moon %in% water){fill <- "blue"}
else if (Moon %in% earth){fill <- "green"}
else if (Moon %in% air){fill <- "gray"}
#return statement
return(c(y, fill, color))
}
drawArt <- function(Sun, Moon){
ggplot() +
#Sun
geom_hline(yintercept=as.numeric(calcSun(Sun)[1]),
size=as.numeric(calcSun(Sun)[2]),
color=as.character(calcSun(Sun)[3])) +
#Moon
geom_point(aes(x=60,y=31),
size=10,
color=as.character(calcMoon(Moon)[2]),
fill=as.character(calcMoon(Moon)[3])) +
xlim(0,120) + ylim(0,120)
}
drawArt(Sun="Virgo", Moon="Gemini")
calcMoon <- function(Moon){
#get index of Moon Sign
index <- as.numeric(match(Moon, signs))
y <- (index*7) + 10
#pick a outline color based on modality of Moon Sign
color <- ""
if (Moon %in% mutable){color <- "purple"}
else if (Moon %in% fixed){color <- "pink"}
else if (Moon %in% cardinal){color <- "yellow"}
#pick a fill color according to Moon Sign's element
fill <- ""
if (Moon %in% fire){fill <- "red"}
else if (Moon %in% water){fill <- "blue"}
else if (Moon %in% earth){fill <- "green"}
else if (Moon %in% air){fill <- "gray"}
#return statement
return(c(y, color, fill))
}
drawArt <- function(Sun, Moon){
ggplot() +
#Sun
geom_hline(yintercept=as.numeric(calcSun(Sun)[1]),
size=as.numeric(calcSun(Sun)[2]),
color=as.character(calcSun(Sun)[3])) +
#Moon
geom_point(aes(x=60,y=31),
size=10,
color=as.character(calcMoon(Moon)[2]),
fill=as.character(calcMoon(Moon)[3])) +
xlim(0,120) + ylim(0,120)
}
drawArt(Sun="Virgo", Moon="Gemini")
drawArt <- function(Sun, Moon){
ggplot() +
#Sun
geom_hline(yintercept=as.numeric(calcSun(Sun)[1]),
size=as.numeric(calcSun(Sun)[2]),
color=as.character(calcSun(Sun)[3])) +
#Moon
geom_point(aes(x=60,y=31),
size=10,
color=as.character(calcMoon(Moon)[2]),
fill=as.character(calcMoon(Moon)[3])) +
xlim(0,120) + ylim(0,120) +
theme(plot.background = element_rect(fill="black"))
}
drawArt(Sun="Virgo", Moon="Gemini")
drawArt <- function(Sun, Moon){
ggplot() +
#Sun
geom_hline(yintercept=as.numeric(calcSun(Sun)[1]),
size=as.numeric(calcSun(Sun)[2]),
color=as.character(calcSun(Sun)[3])) +
#Moon
geom_point(aes(x=60,y=31),
size=10,
color=as.character(calcMoon(Moon)[2]),
fill=as.character(calcMoon(Moon)[3])) +
xlim(0,120) + ylim(0,120) +
theme(panel.background = element_rect(fill="black"))
}
drawArt(Sun="Virgo", Moon="Gemini")
drawArt <- function(Sun, Moon){
ggplot() +
#Sun
geom_hline(yintercept=as.numeric(calcSun(Sun)[1]),
size=as.numeric(calcSun(Sun)[2]),
color=as.character(calcSun(Sun)[3])) +
#Moon
geom_point(aes(x=60,y=31),
size=10,
color=as.character(calcMoon(Moon)[2]),
fill=as.character(calcMoon(Moon)[3]),
stroke=5) +
xlim(0,120) + ylim(0,120)
}
drawArt(Sun="Virgo", Moon="Gemini")
drawArt <- function(Sun, Moon){
ggplot() +
#Sun
geom_hline(yintercept=as.numeric(calcSun(Sun)[1]),
size=as.numeric(calcSun(Sun)[2]),
color=as.character(calcSun(Sun)[3])) +
#Moon
geom_point(aes(x=60,y=31),
size=10,
color=as.character(calcMoon(Moon)[2]),
fill=as.character(calcMoon(Moon)[3]),
stroke=5,
shape=21) +
xlim(0,120) + ylim(0,120)
}
drawArt(Sun="Virgo", Moon="Gemini")
calcSun <- function(Sun){
#get index of Sun Sign
index <- as.numeric(match(Sun, signs))
#get modality of Sun Sign
modality <- 0
if (Sun %in% mutable){modality <- 1}
else if (Sun %in% fixed){modality <- 2}
else if (Sun %in% cardinal){modality <- 3}
#pick a color according to Sun Sign's element
color <- ""
if (Sun %in% fire){color <- "#d569ad"}
else if (Sun %in% water){color <- "#69d5b2"}
else if (Sun %in% earth){color <- "#69d591"}
else if (Sun %in% air){color <- "#d5a769"}
#return statement
return(c(index*10, modality*3, color))
}
calcMoon <- function(Moon){
#get index of Moon Sign
index <- as.numeric(match(Moon, signs))
y <- (index*7) + 10
#pick a outline color based on modality of Moon Sign
color <- ""
if (Moon %in% mutable){color <- "#d5c769"}
else if (Moon %in% fixed){color <- "#69d591"}
else if (Moon %in% cardinal){color <- "#6977d5"}
#pick a fill color according to Moon Sign's element
fill <- ""
if (Moon %in% fire){fill <- "#d569ad"}
else if (Moon %in% water){fill <- "#69d5b2"}
else if (Moon %in% earth){fill <- "#69d591"}
else if (Moon %in% air){fill <- "#d5a769"}
#return statement
return(c(y, color, fill))
}
drawArt <- function(Sun, Moon){
ggplot() +
#Sun
geom_hline(yintercept=as.numeric(calcSun(Sun)[1]),
size=as.numeric(calcSun(Sun)[2]),
color=as.character(calcSun(Sun)[3])) +
#Moon
geom_point(aes(x=60,y=31),
size=10,
color=as.character(calcMoon(Moon)[2]),
fill=as.character(calcMoon(Moon)[3]),
stroke=5,
shape=21) +
xlim(0,120) + ylim(0,120)
}
drawArt(Sun="Virgo", Moon="Gemini")
drawArt(Sun="Aries", Moon="Cancer")
drawArt(Sun="Gemini", Moon="Libra")
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
shiny::runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
shiny::runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
shiny::runApp('C:/Users/Moria/astrology-aRt')
install.packages("bslib")
install.packages("bslib")
shiny::runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
ggplot() +
#Mercury
geom_vline(xintercept=as.numeric(calcLine(Merc)[1]),
size=as.numeric(calcLine(Merc)[2]),
color=as.character(calcLine(Merc))[3]) +
#Sun
geom_hline(yintercept=as.numeric(calcLine(Sun)[1]),
size=as.numeric(calcLine(Sun)[2]),
color=as.character(calcLine(Sun)[3])) +
#Moon
geom_point(aes(x=60,y=as.numeric(calcPoint(Moon)[1])),
size=20,
color=as.character(calcPoint(Moon)[2]),
fill=as.character(calcPoint(Moon)[3]),
stroke=5,
shape=21) +
#Venus
geom_point(aes(x=50, y=as.numeric(calcPoint(Venus)[1])),
size=18,
color=as.character(calcPoint(Venus)[2]),
fill=as.character(calcPoint(Venus)[3]),
stroke=4,
shape=21) +
#Mars
geom_point(aes(x=70, y=as.numeric(calcPoint(Mars)[1])),
size=15,
color=as.character(calcPoint(Mars)[2]),
fill=as.character(calcPoint(Mars)[3]),
stroke=3.5,
shape=21) +
#Jupiter
geom_point(aes(x=40, y=as.numeric(calcPoint(Jupiter)[1])),
size=12,
color=as.character(calcPoint(Jupiter)[2]),
fill=as.character(calcPoint(Jupiter)[3]),
stroke=3,
shape=21) +
#Saturn
geom_point(aes(x=80, y=as.numeric(calcPoint(Saturn)[1])),
size=10,
color=as.character(calcPoint(Saturn)[2]),
fill=as.character(calcPoint(Saturn)[3]),
stroke=2.5,
shape=21) +
#Uranus
geom_point(aes(x=30, y=as.numeric(calcPoint(Uranus)[1])),
size=8,
color=as.character(calcPoint(Uranus)[2]),
fill=as.character(calcPoint(Uranus)[3]),
stroke=2,
shape=21) +
#Neptune
geom_point(aes(x=90, y=as.numeric(calcPoint(Neptune)[1])),
size=6,
color=as.character(calcPoint(Neptune)[2]),
fill=as.character(calcPoint(Neptune)[3]),
stroke=1.5,
shape=21) +
#Pluto
geom_point(aes(x=100, y=as.numeric(calcPoint(Pluto)[1])),
size=4,
color=as.character(calcPoint(Pluto)[2]),
fill=as.character(calcPoint(Pluto)[3]),
stroke=1,
shape=21) +
#Plot logistics
xlim(0,120) + ylim(0,120) +
xlab("") + ylab("") +
coord_cartesian(expand=FALSE, clip="off") +
theme(panel.background=element_blank(),
plot.background=element_blank(),
panel.grid = element_line(color=calcAsc(Asc), size=26),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.margin = margin(-1,-1,-1,-1, unit="cm")
)
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp()
runApp('C:/Users/Moria/astrology-aRt')
runApp()
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
runApp('C:/Users/Moria/astrology-aRt')
setwd("C:/Users/Moria/tidy-tuesday/2022_Week02")
bee_plot <- ggplot(stressor2020_red, aes(x=stressor, y=stress_pct, color=stressor)) +
geom_beeswarm(size=0.5) +
facet_wrap(~months, nrow=1) +
scale_color_manual(values = c("#86b918", "#c76009", "#9258b1", "#3ab5b3")) +
labs(title="Bee Colony Stressors in the U.S. (2020)",
subtitle="Percentage of colonies affected in each state by <strong style='color:#86b918'>Diseases</strong>, <strong style='color:#c76009'>Pesticides</strong>, <strong style='color:#9258b1'>Varroa Mites</strong>, and <strong style='color:#3ab5b3'>Other Pests/Pesticides</strong>.",
caption="Moriah Taylor | @moriah_taylor58 | #TidyTuesday") +
ylab("% Colonies Affected") +
coord_cartesian(clip="off") +
theme(
#plot
plot.title = element_text(color="white", family="regular", size=65),
plot.subtitle = element_markdown(color="white", family="regular", size=40),
plot.caption = element_text(color="grey", family="regular", size=30, hjust=0.5),
plot.title.position = "plot",
plot.caption.position = "plot",
#background
plot.background = element_rect(fill="black"),
panel.background = element_rect(fill="black", color="white"),
panel.grid = element_blank(),
#axes
axis.text.x = element_blank(),
axis.text.y = element_text(color="white", family="regular", size=30),
axis.title.x = element_blank(),
axis.title.y = element_text(color="white", family="regular", size=40),
axis.ticks = element_blank(),
#strip
strip.background = element_rect(fill="white"),
strip.text = element_text(color="black", family="regular", size=50),
#legend
legend.position = "none"
)
ggsave("Stressor_Beeswarm.png",
plot=bee_plot,
device = agg_png(width = 9, height = 4, units = "in", res = 300))
#load packages
library(tidyverse) #data wrangling
library(showtext) #custom fonts
library(ggbeeswarm) #beeswarm plotting with ggplot
library(ggtext) #element_markdown
library(ragg) #agg_png()
#read in data manually
colony <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/colony.csv')
stressor <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/stressor.csv')
#use case when to fix typo
stressor <- stressor %>% mutate(stressor = case_when(
stressor=="Varroa mites" ~ "Varroa Mites",
stressor=="Other pests/parasites" ~ "Other Pests/Pesticides",
stressor=="Disesases" ~ "Diseases",
stressor=="Pesticides" ~ "Pesticides",
stressor=="Other" ~ "Other",
stressor=="Unknown" ~ "Unknown"
))
#factorize months
stressor$months <- factor(stressor$months, levels = c("January-March",
"April-June",
"July-September",
"October-December"))
#filter to year 2020
stressor2020 <- stressor %>% filter(year==2020)
#reduce to specific stressors
stressor2020_red <- stressor2020 %>% filter(stressor %in% c("Varroa Mites", "Pesticides", "Diseases", "Other Pests/Pesticides"))
#factorize stressors
stressor2020_red$stressor <- factor(stressor2020_red$stressor, levels=c("Diseases",
"Pesticides",
"Varroa Mites",
"Other Pests/Pesticides"))
#load font
font_add(family="regular", "SignikaNegative-Regular.ttf")
showtext_auto()
#make plot
bee_plot <- ggplot(stressor2020_red, aes(x=stressor, y=stress_pct, color=stressor)) +
geom_beeswarm(size=0.5) +
facet_wrap(~months, nrow=1) +
scale_color_manual(values = c("#86b918", "#c76009", "#9258b1", "#3ab5b3")) +
labs(title="Bee Colony Stressors in the U.S. (2020)",
subtitle="Percentage of colonies affected in each state by <strong style='color:#86b918'>Diseases</strong>, <strong style='color:#c76009'>Pesticides</strong>, <strong style='color:#9258b1'>Varroa Mites</strong>, and <strong style='color:#3ab5b3'>Other Pests/Pesticides</strong>.",
caption="Moriah Taylor | @moriah_taylor58 | #TidyTuesday") +
ylab("% Colonies Affected") +
coord_cartesian(clip="off") +
theme(
#plot
plot.title = element_text(color="white", family="regular", size=65),
plot.subtitle = element_markdown(color="white", family="regular", size=40),
plot.caption = element_text(color="grey", family="regular", size=30, hjust=0.5),
plot.title.position = "plot",
plot.caption.position = "plot",
#background
plot.background = element_rect(fill="black"),
panel.background = element_rect(fill="black", color="white"),
panel.grid = element_blank(),
#axes
axis.text.x = element_blank(),
axis.text.y = element_text(color="white", family="regular", size=30),
axis.title.x = element_blank(),
axis.title.y = element_text(color="white", family="regular", size=40),
axis.ticks = element_blank(),
#strip
strip.background = element_rect(fill="white"),
strip.text = element_text(color="black", family="regular", size=50),
#legend
legend.position = "none"
)
ggsave("Stressor_Beeswarm.png",
plot=bee_plot,
device = agg_png(width = 9, height = 4, units = "in", res = 300))
