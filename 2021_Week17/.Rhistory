legend.background = element_rect(fill="#cccccc", size=0.5),
legend.position = "top"
)
parks_plot <- ggplot(data=counts, aes(x=category, y=n, fill=category)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("#AAD213", "#5A1B8A", "#037FD0", "#E68200", "#036D50")) +
facet_wrap(~park_name_short) +
labs(
title="Biodiversity in US National Parks",
caption="Source: National Parks Service  ||  Moriah Taylor  ||  Twitter: moriah_taylor58  ||  GitHub: moriahtaylor1"
) +ylab("No. of Species")+xlab("")+plot_theme
#save plot
ggsave("parks_plot.png",
plot = parks_plot,
device = agg_png(width = 7, height = 7, units = "in", res = 300))
#add fonts
font_add(family = "title", "OrelegaOne-Regular.ttf")
showtext_auto()
#colors
bar_colors = c("#AAD213", "#5A1B8A", "#037FD0", "#E68200", "#AAD213")
#theme
plot_theme <- theme(
# titles
plot.title = element_text(family = "title", size = 35, color = "black", hjust=0.5, vjust=0.5),
plot.caption = element_text(family = "title", size = 25, color = "black", hjust = 0.5),
# panel and plot background
panel.grid.major = element_blank(),
panel.grid.minor = element_line(color="#b8b8b8", size=0.25),
panel.background = element_rect(fill = "#cccccc"),
plot.background = element_rect(fill = "#cccccc"),
# axis
axis.title.y = element_text(family="title", size=35, color="#525252"),
axis.text.y = element_text(),
axis.text.x = element_blank(),
axis.ticks.x.bottom = element_blank(),
#multi-plot text titles
strip.text = element_text(size=20),
#legend
legend.title = element_blank(),
legend.text = element_text(family = "title", size=30, color="black"),
legend.background = element_rect(fill="#cccccc", size=0.5),
legend.position = "top"
)
parks_plot <- ggplot(data=counts, aes(x=category, y=n, fill=category)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("#AAD213", "#5A1B8A", "#037FD0", "#E68200", "#036D50")) +
facet_wrap(~park_name_short) +
labs(
title="Biodiversity in US National Parks",
caption="Source: National Parks Service  ||  Moriah Taylor  ||  Twitter: moriah_taylor58  ||  GitHub: moriahtaylor1"
) +ylab("No. of Species")+xlab("")+plot_theme
#save plot
ggsave("parks_plot.png",
plot = parks_plot,
device = agg_png(width = 7, height = 7, units = "in", res = 300))
#add fonts
font_add(family = "title", "OrelegaOne-Regular.ttf")
font_add(family = "title2", "Raleway.ttf")
showtext_auto()
#colors
bar_colors = c("#AAD213", "#5A1B8A", "#037FD0", "#E68200", "#AAD213")
#theme
plot_theme <- theme(
# titles
plot.title = element_text(family = "title", size = 35, color = "black", hjust=0.5, vjust=0.5),
plot.caption = element_text(family = "title", size = 25, color = "black", hjust = 0.5),
# panel and plot background
panel.grid.major = element_blank(),
panel.grid.minor = element_line(color="#b8b8b8", size=0.25),
panel.background = element_rect(fill = "#cccccc"),
plot.background = element_rect(fill = "#cccccc"),
# axis
axis.title.y = element_text(family="title", size=35, color="#525252"),
axis.text.y = element_text(),
axis.text.x = element_blank(),
axis.ticks.x.bottom = element_blank(),
#multi-plot text titles
strip.text = element_text(family="title2", size=20),
#legend
legend.title = element_blank(),
legend.text = element_text(family = "title", size=30, color="black"),
legend.background = element_rect(fill="#cccccc", size=0.5),
legend.position = "top"
)
parks_plot <- ggplot(data=counts, aes(x=category, y=n, fill=category)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("#AAD213", "#5A1B8A", "#037FD0", "#E68200", "#036D50")) +
facet_wrap(~park_name_short) +
labs(
title="Biodiversity in US National Parks",
caption="Source: National Parks Service  ||  Moriah Taylor  ||  Twitter: moriah_taylor58  ||  GitHub: moriahtaylor1"
) +ylab("No. of Species")+xlab("")+plot_theme
#save plot
ggsave("parks_plot.png",
plot = parks_plot,
device = agg_png(width = 7, height = 7, units = "in", res = 300))
#add fonts
font_add(family = "title", "OrelegaOne-Regular.ttf")
font_add(family = "title2", "Raleway.ttf")
showtext_auto()
#colors
bar_colors = c("#AAD213", "#5A1B8A", "#037FD0", "#E68200", "#AAD213")
#theme
plot_theme <- theme(
# titles
plot.title = element_text(family = "title", size = 35, color = "black", hjust=0.5, vjust=0.5),
plot.caption = element_text(family = "title", size = 25, color = "black", hjust = 0.5),
# panel and plot background
panel.grid.major = element_blank(),
panel.grid.minor = element_line(color="#b8b8b8", size=0.25),
panel.background = element_rect(fill = "#cccccc"),
plot.background = element_rect(fill = "#cccccc"),
# axis
axis.title.y = element_text(family="title", size=35, color="#525252"),
axis.text.y = element_text(),
axis.text.x = element_blank(),
axis.ticks.x.bottom = element_blank(),
#multi-plot text titles
strip.text = element_text(family="title2", size=20, fontface="bold"),
#legend
legend.title = element_blank(),
legend.text = element_text(family = "title", size=30, color="black"),
legend.background = element_rect(fill="#cccccc", size=0.5),
legend.position = "top"
)
#add fonts
font_add(family = "title", "OrelegaOne-Regular.ttf")
font_add(family = "title2", "Merriweather-Regular.ttf")
showtext_auto()
#colors
bar_colors = c("#AAD213", "#5A1B8A", "#037FD0", "#E68200", "#AAD213")
#theme
plot_theme <- theme(
# titles
plot.title = element_text(family = "title", size = 35, color = "black", hjust=0.5, vjust=0.5),
plot.caption = element_text(family = "title", size = 25, color = "black", hjust = 0.5),
# panel and plot background
panel.grid.major = element_blank(),
panel.grid.minor = element_line(color="#b8b8b8", size=0.25),
panel.background = element_rect(fill = "#cccccc"),
plot.background = element_rect(fill = "#cccccc"),
# axis
axis.title.y = element_text(family="title", size=35, color="#525252"),
axis.text.y = element_text(),
axis.text.x = element_blank(),
axis.ticks.x.bottom = element_blank(),
#multi-plot text titles
strip.text = element_text(family="title2", size=20),
#legend
legend.title = element_blank(),
legend.text = element_text(family = "title", size=30, color="black"),
legend.background = element_rect(fill="#cccccc", size=0.5),
legend.position = "top"
)
parks_plot <- ggplot(data=counts, aes(x=category, y=n, fill=category)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("#AAD213", "#5A1B8A", "#037FD0", "#E68200", "#036D50")) +
facet_wrap(~park_name_short) +
labs(
title="Biodiversity in US National Parks",
caption="Source: National Parks Service  ||  Moriah Taylor  ||  Twitter: moriah_taylor58  ||  GitHub: moriahtaylor1"
) +ylab("No. of Species")+xlab("")+plot_theme
#save plot
ggsave("parks_plot.png",
plot = parks_plot,
device = agg_png(width = 7, height = 7, units = "in", res = 300))
#add fonts
font_add(family = "title", "OrelegaOne-Regular.ttf")
font_add(family = "title2", "Merriweather-Regular.ttf")
showtext_auto()
#colors
bar_colors = c("#AAD213", "#5A1B8A", "#037FD0", "#E68200", "#AAD213")
#theme
plot_theme <- theme(
# titles
plot.title = element_text(family = "title", size = 35, color = "black", hjust=0.5, vjust=0.5),
plot.caption = element_text(family = "title", size = 25, color = "black", hjust = 0.5),
# panel and plot background
panel.grid.major = element_blank(),
panel.grid.minor = element_line(color="#b8b8b8", size=0.25),
panel.background = element_rect(fill = "#cccccc"),
plot.background = element_rect(fill = "#cccccc"),
# axis
axis.title.y = element_text(family="title", size=35, color="black"),
axis.text.y = element_text(),
axis.text.x = element_blank(),
axis.ticks.x.bottom = element_blank(),
#multi-plot text titles
strip.text = element_text(family="title2", size=20),
#legend
legend.title = element_blank(),
legend.text = element_text(family = "title", size=30, color="black"),
legend.background = element_rect(fill="#cccccc", size=0.5),
legend.position = "top"
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(extrafont)
library(showtext)
library(rmarkdown)
library(ragg)
library(ggimage)
library(png)
library(grid)
#load in data
parks <- read.csv("parks.csv")
species <- read.csv("species.csv")
#pick 12 parks
parks12 <- c("Yosemite", "Yellowstone", "Glacier", "Grand Canyon", "Zion",
"Grand Teton", "Rocky Mountain", "Sequoia | Kings Canyon",
"Olympic", "Mount Rainier", "Acadia", "Everglades")
#rename columns
species_colnames <- c("species_id", "park_name", "category", "order", "family", "scientific_name", "common_names", "record_status", "occurrence", "nativeness", "abundance", "seasonality", "conservation_status", "X")
parks_colnames <- c("park_code", "park_name", "state", "acres", "latitude", "longitude")
names(species) <- species_colnames
names(parks) <- parks_colnames
#create short names for parks
parks$park_name_short <- str_remove(parks$park_name, " National Park")
parks$park_name_short <- str_remove(parks$park_name_short, " and Preserve")
#take care of special cases
parks[48,7] <- "Sequoia | Kings Canyon"
parks[53,7] <- "Wrangell-St.Elias"
#create long names for states
parks$state_long <- ""
for (i in 1:56){
if (parks[i,3]=="ME"){
parks[i,8]<-"Maine"
}
else if (parks[i,3]=="UT"){
parks[i,8]<-"Utah"
}
else if (parks[i,3]=="SD"){
parks[i,8]<-"South Dakota"
}
else if (parks[i,3]=="TX"){
parks[i,8]<-"Texas"
}
else if (parks[i,3]=="FL"){
parks[i,8]<-"Florida"
}
else if (parks[i,3]=="CO"){
parks[i,8]<-"Colorado"
}
else if (parks[i,3]=="NM"){
parks[i,8]<-"New Mexico"
}
else if (parks[i,3]=="CA"){
parks[i,8]<-"California"
}
else if (parks[i,3]=="SC"){
parks[i,8]<-"South Carolina"
}
else if (parks[i,3]=="OR"){
parks[i,8]<-"Oregon"
}
else if (parks[i,3]=="OH"){
parks[i,8]<-"Ohio"
}
else if (parks[i,3]=="AK"){
parks[i,8]<-"Alaska"
}
else if (parks[i,3]=="CA, NV"){
parks[i,8]<-"California | Nevada"
}
else if (parks[i,3]=="MT"){
parks[i,8]<-"Montana"
}
else if (parks[i,3]=="NV"){
parks[i,8]<-"Nevada"
}
else if (parks[i,3]=="TN, NC"){
parks[i,8]<-"Tennessee | North Carolina"
}
else if (parks[i,3]=="AZ"){
parks[i,8]<-"Arizona"
}
else if (parks[i,3]=="WY"){
parks[i,8]<-"Wyoming"
}
else if (parks[i,3]=="HI"){
parks[i,8]<-"Hawaii"
}
else if (parks[i,3]=="AR"){
parks[i,8]<-"Arkansas"
}
else if (parks[i,3]=="MI"){
parks[i,8]<-"Michigan"
}
else if (parks[i,3]=="KY"){
parks[i,8]<-"Kentucky"
}
else if (parks[i,3]=="WA"){
parks[i,8]<-"Washington"
}
else if (parks[i,3]=="VA"){
parks[i,8]<-"Virginia"
}
else if (parks[i,3]=="ND"){
parks[i,8]<-"North Dakota"
}
else if (parks[i,3]=="MN"){
parks[i,8]<-"Minnesota"
}
else if (parks[i,3]=="WY, MT, ID"){
parks[i,8]<-"Wyoming | Montana | Idaho"
}
}
#add meters square
parks$meters_sq <- parks$acres * 4046.86
#subset to desired parks
select_parks <- parks %>%
filter(park_name_short %in% parks12)
#merge
select_data <- merge(species, select_parks, by="park_name")
#get vertebrates
select_data <- select_data %>%
filter(category %in% c("Bird", "Mammal", "Amphibian", "Reptile", "Fish"))
#get counts
counts <- select_data %>% group_by(park_name_short) %>% count(category)
#add fonts
font_add(family = "title", "OrelegaOne-Regular.ttf")
font_add(family = "title2", "Merriweather-Regular.ttf")
showtext_auto()
#colors
bar_colors = c("#AAD213", "#5A1B8A", "#037FD0", "#E68200", "#AAD213")
#theme
plot_theme <- theme(
# titles
plot.title = element_text(family = "title", size = 35, color = "black", hjust=0.5, vjust=0.5),
plot.caption = element_text(family = "title", size = 25, color = "black", hjust = 0.5),
# panel and plot background
panel.grid.major = element_blank(),
panel.grid.minor = element_line(color="#b8b8b8", size=0.25),
panel.background = element_rect(fill = "#cccccc"),
plot.background = element_rect(fill = "#cccccc"),
# axis
axis.title.y = element_text(family="title", size=35, color="black"),
axis.text.y = element_text(),
axis.text.x = element_blank(),
axis.ticks.x.bottom = element_blank(),
#multi-plot text titles
strip.text = element_text(family="title2", size=20),
#legend
legend.title = element_blank(),
legend.text = element_text(family = "title", size=30, color="black"),
legend.background = element_rect(fill="#cccccc", size=0.5),
legend.position = "top"
)
parks_plot <- ggplot(data=counts, aes(x=category, y=n, fill=category)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("#AAD213", "#5A1B8A", "#037FD0", "#E68200", "#036D50")) +
facet_wrap(~park_name_short) +
labs(
title="Biodiversity in US National Parks",
caption="Source: National Parks Service  ||  Moriah Taylor  ||  Twitter: moriah_taylor58  ||  GitHub: moriahtaylor1"
) +ylab("No. of Species")+xlab("")+plot_theme
#save plot
ggsave("parks_plot.png",
plot = parks_plot,
device = agg_png(width = 7, height = 7, units = "in", res = 300))
setwd("D:/Users/Moria/tidy-tuesday/2021_Week17")
library(dplyr)
library(tidyverse)
library(stringr)
library(ggplot)
library(ggplot2)
netflix <- read.csv("Netflix_Titles.csv")
View(netflix)
netflix[1,4]
unique(netflix$listed_in)
movies <- subset(netflix, type=="Movie")
View(movies)
unique(movies$listed_in)
tarantino <- subset(movies, director=="Quentin Tarantino")
View(tarantino)
movies <- movies %>% mutate(tarantino = isTRUE(director=="Quentin Tarantino"))
View(movies)
movies <- movies %>% mutate(tarantino = isTRUE(director=="Quentin Tarantino"))
tarantino <- subset(movies, director=="Quentin Tarantino")
View(tarantino)
movies$tarantino <- isTRUE(movies$director=="Quentin Tarantino")
tarantino <- subset(movies, director=="Quentin Tarantino")
View(tarantino)
movies <- subset(netflix, year>=1990)
movies <- subset(netflix, release_year>=1990)
fig <- plot_ly(data=movies, x=~release_year, y=~duration)
library(plotly)
fig <- plot_ly(data=movies, x=~release_year, y=~duration)
fig
movies <- subset(netflix, type=="Movie")
movies <- subset(netflix, type=="Movie" & release_year>=1990)
fig <- plot_ly(data=movies, x=~release_year, y=~duration)
fig
movies$duration <- as.integer(unlist(strsplit(movies$duration, " "))[1])
View(movies)
movies[1,10]
movies <- subset(netflix, type=="Movie" & release_year>=1990)
for (i in movies){
split_list <- unlist(strsplit(movies[i,10], " "))
duration <- as.integer[1]
movies[i,10] <- duration
}
for (i in movies){
split_list <- unlist(strsplit(movies[i,10], " "))
duration <- as.integer(split_list[1])
movies[i,10] <- duration
}
movies <- subset(netflix, type=="Movie" & release_year>=1990)
print(unlist(strsplit("63 min", " ")))
v <- unlist(strsplit("63 min", " "))
v[1]
for (i in nrow(movies)){
split_list <- unlist(strsplit(movies[i,10], " "))
duration <- as.integer(split_list[1])
movies[i,10] <- duration
}
View(movies)
for (i in nrow(movies)){
split_list <- unlist(strsplit(movies[i,10], " "))
duration <- as.integer(split_list[1])
movies[i,10] <- duration
}
View(movies)
v[[1]]
for (i in nrow(movies)){
split_list <- unlist(strsplit(movies[i,10], " "))
duration <- as.integer(split_list[[1]])
movies[i,10] <- duration
}
for (i in nrow(movies)){
duration_char <- str_remove(movies[i,10], " min")
movies[i,10] <- as.integer(duration_char)
}
for (i in nrow(movies)){
duration_char <- str_remove(movies[i,10], " min")
print(duration_char)
#movies[i,10] <- as.integer(duration_char)
}
for (i in 1:nrow(movies)){
duration_char <- str_remove(movies[i,10], " min")
print(duration_char)
#movies[i,10] <- as.integer(duration_char)
}
for (i in 1:nrow(movies)){
duration_char <- str_remove(movies[i,10], " min")
movies[i,10] <- as.integer(duration_char)
}
View(movies)
fig <- plot_ly(data=movies, x=~release_year, y=~duration)
fig
movies$duration <- integer(movies$duration)
tarantino <- subset(movies, director="Quentin Tarantino")
View(tarantino)
tarantino <- subset(movies, director=="Quentin Tarantino")
tarantino_id <- tarantino$show_id
for (i in 1:nrow(movies)){
if (movies[i,4] %in% tarantino_id){
movies$tarantino[i] <- FALSE
}
else{
movies$tarantino[i] <- TRUE
}
}
View(movies)
for (i in 1:nrow(movies)){
if (movies[i,1] %in% tarantino_id){
movies$tarantino[i] <- FALSE
}
else{
movies$tarantino[i] <- TRUE
}
}
tarantino <- subset(movies, director=="Quentin Tarantino")
for (i in 1:nrow(movies)){
if (movies[i,1] %in% tarantino_id){
movies$tarantino[i] <- TRUE
}
else{
movies$tarantino[i] <- FALSE
}
}
View(tarantino)
movies$tarantino <- NA
tarantino_id <- tarantino$show_id
movies$tarantino <- NA
for (i in 1:nrow(movies)){
if (movies[i,1] %in% tarantino_id){
movies[i,13] <- TRUE
}
else{
movies[i,13] <- FALSE
}
}
tarantino <- subset(movies, director=="Quentin Tarantino")
View(movies)
tarantino_df <- subset(movies, director=="Quentin Tarantino")
tarantino_id <- tarantino$show_id
movies$tarantino <- NA
for (i in 1:nrow(movies)){
if (movies[i,1] %in% tarantino_id){
movies[i,13] <- TRUE
}
else{
movies[i,13] <- FALSE
}
}
ggplot(movies, aes(x=release_year, y=duration)) + geom_point(fill=tarantino)
ggplot(movies, aes(x=release_year, y=duration)) + geom_point()
write.csv(output_data, "output_data.csv")
output_data <- data.frame(movies$release_year, movies$duration, movies$tarantino)
write.csv(output_data, "output_data.csv")
